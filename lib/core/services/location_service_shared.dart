import 'package:flutter/material.dart';
import 'package:geolocator/geolocator.dart';
import 'package:latlong2/latlong.dart';
import 'dart:async';

class LocationServiceShared {
  static final LocationServiceShared _instance =
      LocationServiceShared._internal();
  factory LocationServiceShared() => _instance;
  LocationServiceShared._internal();

  Position? _currentPosition;
  bool _isLocationEnabled = false;
  bool _isLoading = false;
  StreamSubscription<Position>? _positionStream;

  // Stream controller para notificar cambios
  final StreamController<Position?> _locationController =
      StreamController<Position?>.broadcast();
  Stream<Position?> get locationStream => _locationController.stream;

  Position? get currentPosition => _currentPosition;
  bool get isLocationEnabled => _isLocationEnabled;
  bool get isLoading => _isLoading;

  /// Obtiene la ubicaci√≥n actual, reutilizando si ya est√° disponible
  Future<Position?> getCurrentLocation({bool forceRefresh = false}) async {
    // Si ya tenemos ubicaci√≥n y no se fuerza refresh, devolver la existente
    if (_currentPosition != null && !forceRefresh) {
      debugPrint(
          'üìç Reutilizando ubicaci√≥n existente: ${_currentPosition!.latitude}, ${_currentPosition!.longitude}');
      return _currentPosition;
    }

    if (_isLoading) {
      debugPrint('‚è≥ Ya hay una solicitud de ubicaci√≥n en progreso...');
      // Esperar a que termine la solicitud actual
      await Future.delayed(const Duration(milliseconds: 500));
      return _currentPosition;
    }

    _isLoading = true;
    _notifyListeners();

    try {
      debugPrint('üîç Iniciando obtenci√≥n de ubicaci√≥n...');

      // Verificar si el servicio de ubicaci√≥n est√° habilitado
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        debugPrint('‚ùå Servicio de ubicaci√≥n deshabilitado');
        _isLoading = false;
        _isLocationEnabled = false;
        _notifyListeners();
        throw Exception('Servicio de ubicaci√≥n deshabilitado');
      }

      // Verificar permisos
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          debugPrint('‚ùå Permisos de ubicaci√≥n denegados');
          _isLoading = false;
          _isLocationEnabled = false;
          _notifyListeners();
          throw Exception('Permisos de ubicaci√≥n denegados');
        }
      }

      if (permission == LocationPermission.deniedForever) {
        debugPrint('üö´ Permisos de ubicaci√≥n denegados permanentemente');
        _isLoading = false;
        _isLocationEnabled = false;
        _notifyListeners();
        throw Exception('Permisos de ubicaci√≥n denegados permanentemente');
      }

      // Intentar obtener ubicaci√≥n con m√∫ltiples configuraciones
      Position? position;

      try {
        // Primer intento: Alta precisi√≥n
        position = await Geolocator.getCurrentPosition(
          desiredAccuracy: LocationAccuracy.high,
          timeLimit: const Duration(seconds: 8),
        ).timeout(const Duration(seconds: 10));
      } catch (e) {
        debugPrint('‚ö†Ô∏è Primer intento fall√≥, probando con precisi√≥n media: $e');

        try {
          // Segundo intento: Precisi√≥n media
          position = await Geolocator.getCurrentPosition(
            desiredAccuracy: LocationAccuracy.medium,
            timeLimit: const Duration(seconds: 8),
          ).timeout(const Duration(seconds: 10));
        } catch (e2) {
          debugPrint(
              '‚ö†Ô∏è Segundo intento fall√≥, probando con precisi√≥n baja: $e2');

          // Tercer intento: Precisi√≥n baja
          position = await Geolocator.getCurrentPosition(
            desiredAccuracy: LocationAccuracy.low,
            timeLimit: const Duration(seconds: 5),
          ).timeout(const Duration(seconds: 8));
        }
      }

      _currentPosition = position;
      _isLocationEnabled = true;
      _isLoading = false;

      debugPrint(
          '‚úÖ Ubicaci√≥n obtenida: ${position?.latitude}, ${position?.longitude}');
      debugPrint('üìè Precisi√≥n: ${position?.accuracy} metros');

      _notifyListeners();
      return position;
    } catch (e) {
      debugPrint('üí• Error al obtener ubicaci√≥n: $e');
      _isLoading = false;
      _isLocationEnabled = false;
      _notifyListeners();
      rethrow;
    }
  }

  /// Inicia el seguimiento continuo de ubicaci√≥n
  void startLocationTracking() {
    if (_positionStream != null) {
      debugPrint('üì° Ya hay seguimiento de ubicaci√≥n activo');
      return;
    }

    debugPrint('üì° Iniciando seguimiento continuo de ubicaci√≥n...');

    const locationSettings = LocationSettings(
      distanceFilter: 10, // Actualizar cada 10 metros
    );

    _positionStream = Geolocator.getPositionStream(
      locationSettings: locationSettings,
    ).listen(
      (Position position) {
        _currentPosition = position;
        _isLocationEnabled = true;
        _notifyListeners();
        debugPrint(
            'üìç Ubicaci√≥n actualizada: ${position.latitude}, ${position.longitude}');
      },
      onError: (error) {
        debugPrint('‚ùå Error en seguimiento de ubicaci√≥n: $error');
      },
    );
  }

  /// Detiene el seguimiento de ubicaci√≥n
  void stopLocationTracking() {
    _positionStream?.cancel();
    _positionStream = null;
    debugPrint('üõë Seguimiento de ubicaci√≥n detenido');
  }

  /// Convierte Position a LatLng
  LatLng? get currentLatLng {
    if (_currentPosition == null) return null;
    return LatLng(_currentPosition!.latitude, _currentPosition!.longitude);
  }

  /// Notifica a todos los listeners sobre cambios
  void _notifyListeners() {
    if (!_locationController.isClosed) {
      _locationController.add(_currentPosition);
    }
  }

  /// Limpia los recursos
  void dispose() {
    stopLocationTracking();
    _locationController.close();
  }

  /// Resetea el estado (√∫til para testing)
  void reset() {
    stopLocationTracking();
    _currentPosition = null;
    _isLocationEnabled = false;
    _isLoading = false;
    _notifyListeners();
  }
}
