name: Build and Release APK

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build and Release APK
    runs-on: ubuntu-latest
    container:
      image: cirrusci/flutter:3.24.3
      options: --user root

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Android SDK and Tools
        run: |
          apt-get update
          apt-get install -y wget unzip

          # Install Android SDK
          export ANDROID_SDK_ROOT=/opt/android-sdk
          mkdir -p $ANDROID_SDK_ROOT
          cd $ANDROID_SDK_ROOT

          # Download and install command line tools
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip -q commandlinetools-linux-11076708_latest.zip
          mkdir -p cmdline-tools/latest
          mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true

          # Set environment variables
          export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin
          export PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools

          # Accept licenses and install required packages
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

          # Configure Flutter
          flutter config --android-sdk $ANDROID_SDK_ROOT
          flutter doctor --android-licenses

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Advanced Dependency Resolution
        run: |
          # Clean everything
          flutter clean
          rm -rf ~/.pub-cache/hosted/pub.dev/geolocator_android-*

          # Force refresh dependencies
          flutter pub cache repair
          flutter pub get --verbose

          # Verify critical dependencies
          flutter pub deps | grep -E "(geolocator|flutter_map|latlong2)"

      - name: Pre-build Validation
        run: |
          # Validate Flutter installation
          flutter doctor -v

          # Check for common issues
          flutter analyze --no-fatal-infos

          # Validate Android configuration
          ls -la android/app/build.gradle.kts
          cat android/app/build.gradle.kts | grep -E "(compileSdk|targetSdk|ndkVersion)"

      - name: Execute Advanced Build Script
        run: |
          chmod +x build_scripts/ci_build.sh
          ./build_scripts/ci_build.sh

      - name: Alternative Build Strategy (if main fails)
        if: failure()
        run: |
          echo "🔄 Main build failed, trying alternative approach..."

          # Use older, more stable Flutter version
          flutter version 3.19.6
          flutter clean
          flutter pub get

          # Try with different build configurations
          flutter build apk --debug --split-per-abi || \
          flutter build apk --debug --target-platform android-arm64 || \
          flutter build apk --debug --no-tree-shake-icons --verbose

      - name: Advanced APK Verification and Health Check
        run: |
          echo "🔍 Performing comprehensive APK verification..."

          # Check if APK exists
          if [ -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
            echo "✅ APK file found"
            
            # Get APK details
            ls -lah build/app/outputs/flutter-apk/app-debug.apk
            file build/app/outputs/flutter-apk/app-debug.apk
            
            # Check APK size (should be reasonable)
            APK_SIZE=$(stat -c%s build/app/outputs/flutter-apk/app-debug.apk)
            echo "📦 APK Size: $((APK_SIZE / 1024 / 1024)) MB"
            
            if [ $APK_SIZE -gt 10485760 ]; then  # > 10MB
              echo "✅ APK size is reasonable"
            else
              echo "⚠️ APK size seems too small, might be corrupted"
            fi
            
            # Verify APK structure
            unzip -l build/app/outputs/flutter-apk/app-debug.apk | head -20
            
          else
            echo "❌ APK file not found, listing directory contents:"
            find build -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
            ls -la build/app/outputs/ 2>/dev/null || echo "Output directory not found"
            exit 1
          fi

      - name: Rename APK for release
        run: |
          mkdir -p release
          cp build/app/outputs/flutter-apk/app-debug.apk release/RouWhite-v${{ github.run_number }}.apk

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: RouWhite v${{ github.run_number }}
          body: |
            🚀 **Nueva versión de RouWhite disponible!**

            📱 **Descarga:** https://gerardoojeda47.github.io/rutasapp/
            📅 **Fecha:** ${{ github.event.head_commit.timestamp }}
            🔢 **Versión:** v${{ github.run_number }}
            📦 **Tipo:** Debug APK (para testing)
            🔧 **Commit:** ${{ github.sha }}

            ## 📲 Instalación:
            1. Descarga el APK desde los assets de esta release
            2. Habilita "Fuentes desconocidas" en Android
            3. Instala la aplicación

            ## 🗺️ Características:
            - Rutas de transporte público en Popayán
            - Mapas interactivos con flutter_map 8.1.0
            - Información de paradas en tiempo real
            - Navegación GPS mejorada
            - Compatibilidad con Android SDK 36

            ## 🔧 Correcciones en esta versión:
            - ✅ Errores de compilación corregidos
            - ✅ Dependencias actualizadas y compatibles
            - ✅ API de geolocator actualizada
            - ✅ Problemas de const LatLng resueltos
          files: |
            release/RouWhite-v${{ github.run_number }}.apk
          draft: false
          prerelease: false
